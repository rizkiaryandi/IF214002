openapi: 3.0.0
paths:
  /administrators:
    get:
      tags:
        - Administrators
      summary: 'Find list Administrators'
      description: 'Returns list of Administrators'
      operationId: getAdministrators
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Administrators' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Administrators' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Administrators' } }
                type: object
        '404':
          description: 'Administrators not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Administrators
      summary: 'Add a new Administrators to the store'
      operationId: addAdministrators
      requestBody:
        $ref: '#/components/requestBodies/Administrators'
      responses:
        '201':
          description: 'Created Administrators'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Administrators'
            application/xml:
              schema:
                $ref: '#/components/schemas/Administrators'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/administrators/{id}':
    get:
      tags:
        - Administrators
      summary: 'Find Administrators by ID'
      description: 'Returns a single Administrators'
      operationId: getAdministratorsById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Administrators to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Administrators'
            application/xml:
              schema:
                $ref: '#/components/schemas/Administrators'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Administrators not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Administrators
      summary: 'Update an existing Administrators'
      operationId: updateAdministrators
      parameters:
        -
          name: id
          in: path
          description: 'Administrators id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Administrators'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Administrators not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Administrators
      summary: 'Deletes a Administrators'
      operationId: deleteAdministrators
      parameters:
        -
          name: id
          in: path
          description: 'Administrators id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /cities:
    get:
      tags:
        - Cities
      summary: 'Find list Cities'
      description: 'Returns list of Cities'
      operationId: getCities
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Cities' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Cities' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Cities' } }
                type: object
        '404':
          description: 'Cities not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Cities
      summary: 'Add a new Cities to the store'
      operationId: addCities
      requestBody:
        $ref: '#/components/requestBodies/Cities'
      responses:
        '201':
          description: 'Created Cities'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cities'
            application/xml:
              schema:
                $ref: '#/components/schemas/Cities'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/cities/{id}':
    get:
      tags:
        - Cities
      summary: 'Find Cities by ID'
      description: 'Returns a single Cities'
      operationId: getCitiesById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Cities to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cities'
            application/xml:
              schema:
                $ref: '#/components/schemas/Cities'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Cities not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Cities
      summary: 'Update an existing Cities'
      operationId: updateCities
      parameters:
        -
          name: id
          in: path
          description: 'Cities id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Cities'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Cities not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Cities
      summary: 'Deletes a Cities'
      operationId: deleteCities
      parameters:
        -
          name: id
          in: path
          description: 'Cities id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /creekConditions:
    get:
      tags:
        - CreekConditions
      summary: 'Find list CreekConditions'
      description: 'Returns list of CreekConditions'
      operationId: getCreekConditions
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/CreekConditions' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/CreekConditions' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/CreekConditions' } }
                type: object
        '404':
          description: 'CreekConditions not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - CreekConditions
      summary: 'Add a new CreekConditions to the store'
      operationId: addCreekConditions
      requestBody:
        $ref: '#/components/requestBodies/CreekConditions'
      responses:
        '201':
          description: 'Created CreekConditions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreekConditions'
            application/xml:
              schema:
                $ref: '#/components/schemas/CreekConditions'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/creekConditions/{id}':
    get:
      tags:
        - CreekConditions
      summary: 'Find CreekConditions by ID'
      description: 'Returns a single CreekConditions'
      operationId: getCreekConditionsById
      parameters:
        -
          name: id
          in: path
          description: 'ID of CreekConditions to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreekConditions'
            application/xml:
              schema:
                $ref: '#/components/schemas/CreekConditions'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'CreekConditions not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - CreekConditions
      summary: 'Update an existing CreekConditions'
      operationId: updateCreekConditions
      parameters:
        -
          name: id
          in: path
          description: 'CreekConditions id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/CreekConditions'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'CreekConditions not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - CreekConditions
      summary: 'Deletes a CreekConditions'
      operationId: deleteCreekConditions
      parameters:
        -
          name: id
          in: path
          description: 'CreekConditions id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /creeks:
    get:
      tags:
        - Creeks
      summary: 'Find list Creeks'
      description: 'Returns list of Creeks'
      operationId: getCreeks
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Creeks' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Creeks' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Creeks' } }
                type: object
        '404':
          description: 'Creeks not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Creeks
      summary: 'Add a new Creeks to the store'
      operationId: addCreeks
      requestBody:
        $ref: '#/components/requestBodies/Creeks'
      responses:
        '201':
          description: 'Created Creeks'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Creeks'
            application/xml:
              schema:
                $ref: '#/components/schemas/Creeks'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/creeks/{id}':
    get:
      tags:
        - Creeks
      summary: 'Find Creeks by ID'
      description: 'Returns a single Creeks'
      operationId: getCreeksById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Creeks to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Creeks'
            application/xml:
              schema:
                $ref: '#/components/schemas/Creeks'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Creeks not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Creeks
      summary: 'Update an existing Creeks'
      operationId: updateCreeks
      parameters:
        -
          name: id
          in: path
          description: 'Creeks id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Creeks'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Creeks not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Creeks
      summary: 'Deletes a Creeks'
      operationId: deleteCreeks
      parameters:
        -
          name: id
          in: path
          description: 'Creeks id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /dikeConditions:
    get:
      tags:
        - DikeConditions
      summary: 'Find list DikeConditions'
      description: 'Returns list of DikeConditions'
      operationId: getDikeConditions
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/DikeConditions' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/DikeConditions' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/DikeConditions' } }
                type: object
        '404':
          description: 'DikeConditions not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - DikeConditions
      summary: 'Add a new DikeConditions to the store'
      operationId: addDikeConditions
      requestBody:
        $ref: '#/components/requestBodies/DikeConditions'
      responses:
        '201':
          description: 'Created DikeConditions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DikeConditions'
            application/xml:
              schema:
                $ref: '#/components/schemas/DikeConditions'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/dikeConditions/{id}':
    get:
      tags:
        - DikeConditions
      summary: 'Find DikeConditions by ID'
      description: 'Returns a single DikeConditions'
      operationId: getDikeConditionsById
      parameters:
        -
          name: id
          in: path
          description: 'ID of DikeConditions to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DikeConditions'
            application/xml:
              schema:
                $ref: '#/components/schemas/DikeConditions'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'DikeConditions not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - DikeConditions
      summary: 'Update an existing DikeConditions'
      operationId: updateDikeConditions
      parameters:
        -
          name: id
          in: path
          description: 'DikeConditions id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/DikeConditions'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'DikeConditions not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - DikeConditions
      summary: 'Deletes a DikeConditions'
      operationId: deleteDikeConditions
      parameters:
        -
          name: id
          in: path
          description: 'DikeConditions id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /dikes:
    get:
      tags:
        - Dikes
      summary: 'Find list Dikes'
      description: 'Returns list of Dikes'
      operationId: getDikes
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Dikes' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Dikes' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Dikes' } }
                type: object
        '404':
          description: 'Dikes not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Dikes
      summary: 'Add a new Dikes to the store'
      operationId: addDikes
      requestBody:
        $ref: '#/components/requestBodies/Dikes'
      responses:
        '201':
          description: 'Created Dikes'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dikes'
            application/xml:
              schema:
                $ref: '#/components/schemas/Dikes'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/dikes/{id}':
    get:
      tags:
        - Dikes
      summary: 'Find Dikes by ID'
      description: 'Returns a single Dikes'
      operationId: getDikesById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Dikes to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dikes'
            application/xml:
              schema:
                $ref: '#/components/schemas/Dikes'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Dikes not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Dikes
      summary: 'Update an existing Dikes'
      operationId: updateDikes
      parameters:
        -
          name: id
          in: path
          description: 'Dikes id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Dikes'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Dikes not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Dikes
      summary: 'Deletes a Dikes'
      operationId: deleteDikes
      parameters:
        -
          name: id
          in: path
          description: 'Dikes id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /drainConditions:
    get:
      tags:
        - DrainConditions
      summary: 'Find list DrainConditions'
      description: 'Returns list of DrainConditions'
      operationId: getDrainConditions
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/DrainConditions' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/DrainConditions' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/DrainConditions' } }
                type: object
        '404':
          description: 'DrainConditions not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - DrainConditions
      summary: 'Add a new DrainConditions to the store'
      operationId: addDrainConditions
      requestBody:
        $ref: '#/components/requestBodies/DrainConditions'
      responses:
        '201':
          description: 'Created DrainConditions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DrainConditions'
            application/xml:
              schema:
                $ref: '#/components/schemas/DrainConditions'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/drainConditions/{id}':
    get:
      tags:
        - DrainConditions
      summary: 'Find DrainConditions by ID'
      description: 'Returns a single DrainConditions'
      operationId: getDrainConditionsById
      parameters:
        -
          name: id
          in: path
          description: 'ID of DrainConditions to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DrainConditions'
            application/xml:
              schema:
                $ref: '#/components/schemas/DrainConditions'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'DrainConditions not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - DrainConditions
      summary: 'Update an existing DrainConditions'
      operationId: updateDrainConditions
      parameters:
        -
          name: id
          in: path
          description: 'DrainConditions id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/DrainConditions'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'DrainConditions not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - DrainConditions
      summary: 'Deletes a DrainConditions'
      operationId: deleteDrainConditions
      parameters:
        -
          name: id
          in: path
          description: 'DrainConditions id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /drains:
    get:
      tags:
        - Drains
      summary: 'Find list Drains'
      description: 'Returns list of Drains'
      operationId: getDrains
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Drains' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Drains' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Drains' } }
                type: object
        '404':
          description: 'Drains not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Drains
      summary: 'Add a new Drains to the store'
      operationId: addDrains
      requestBody:
        $ref: '#/components/requestBodies/Drains'
      responses:
        '201':
          description: 'Created Drains'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Drains'
            application/xml:
              schema:
                $ref: '#/components/schemas/Drains'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/drains/{id}':
    get:
      tags:
        - Drains
      summary: 'Find Drains by ID'
      description: 'Returns a single Drains'
      operationId: getDrainsById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Drains to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Drains'
            application/xml:
              schema:
                $ref: '#/components/schemas/Drains'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Drains not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Drains
      summary: 'Update an existing Drains'
      operationId: updateDrains
      parameters:
        -
          name: id
          in: path
          description: 'Drains id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Drains'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Drains not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Drains
      summary: 'Deletes a Drains'
      operationId: deleteDrains
      parameters:
        -
          name: id
          in: path
          description: 'Drains id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /industryPollutions:
    get:
      tags:
        - IndustryPollutions
      summary: 'Find list IndustryPollutions'
      description: 'Returns list of IndustryPollutions'
      operationId: getIndustryPollutions
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/IndustryPollutions' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/IndustryPollutions' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/IndustryPollutions' } }
                type: object
        '404':
          description: 'IndustryPollutions not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - IndustryPollutions
      summary: 'Add a new IndustryPollutions to the store'
      operationId: addIndustryPollutions
      requestBody:
        $ref: '#/components/requestBodies/IndustryPollutions'
      responses:
        '201':
          description: 'Created IndustryPollutions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndustryPollutions'
            application/xml:
              schema:
                $ref: '#/components/schemas/IndustryPollutions'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/industryPollutions/{id}':
    get:
      tags:
        - IndustryPollutions
      summary: 'Find IndustryPollutions by ID'
      description: 'Returns a single IndustryPollutions'
      operationId: getIndustryPollutionsById
      parameters:
        -
          name: id
          in: path
          description: 'ID of IndustryPollutions to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndustryPollutions'
            application/xml:
              schema:
                $ref: '#/components/schemas/IndustryPollutions'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'IndustryPollutions not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - IndustryPollutions
      summary: 'Update an existing IndustryPollutions'
      operationId: updateIndustryPollutions
      parameters:
        -
          name: id
          in: path
          description: 'IndustryPollutions id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/IndustryPollutions'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'IndustryPollutions not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - IndustryPollutions
      summary: 'Deletes a IndustryPollutions'
      operationId: deleteIndustryPollutions
      parameters:
        -
          name: id
          in: path
          description: 'IndustryPollutions id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /observers:
    get:
      tags:
        - Observers
      summary: 'Find list Observers'
      description: 'Returns list of Observers'
      operationId: getObservers
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Observers' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Observers' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Observers' } }
                type: object
        '404':
          description: 'Observers not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Observers
      summary: 'Add a new Observers to the store'
      operationId: addObservers
      requestBody:
        $ref: '#/components/requestBodies/Observers'
      responses:
        '201':
          description: 'Created Observers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observers'
            application/xml:
              schema:
                $ref: '#/components/schemas/Observers'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/observers/{id}':
    get:
      tags:
        - Observers
      summary: 'Find Observers by ID'
      description: 'Returns a single Observers'
      operationId: getObserversById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Observers to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observers'
            application/xml:
              schema:
                $ref: '#/components/schemas/Observers'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Observers not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Observers
      summary: 'Update an existing Observers'
      operationId: updateObservers
      parameters:
        -
          name: id
          in: path
          description: 'Observers id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Observers'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Observers not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Observers
      summary: 'Deletes a Observers'
      operationId: deleteObservers
      parameters:
        -
          name: id
          in: path
          description: 'Observers id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /provinces:
    get:
      tags:
        - Provinces
      summary: 'Find list Provinces'
      description: 'Returns list of Provinces'
      operationId: getProvinces
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Provinces' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Provinces' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Provinces' } }
                type: object
        '404':
          description: 'Provinces not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Provinces
      summary: 'Add a new Provinces to the store'
      operationId: addProvinces
      requestBody:
        $ref: '#/components/requestBodies/Provinces'
      responses:
        '201':
          description: 'Created Provinces'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provinces'
            application/xml:
              schema:
                $ref: '#/components/schemas/Provinces'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/provinces/{id}':
    get:
      tags:
        - Provinces
      summary: 'Find Provinces by ID'
      description: 'Returns a single Provinces'
      operationId: getProvincesById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Provinces to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provinces'
            application/xml:
              schema:
                $ref: '#/components/schemas/Provinces'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Provinces not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Provinces
      summary: 'Update an existing Provinces'
      operationId: updateProvinces
      parameters:
        -
          name: id
          in: path
          description: 'Provinces id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Provinces'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Provinces not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Provinces
      summary: 'Deletes a Provinces'
      operationId: deleteProvinces
      parameters:
        -
          name: id
          in: path
          description: 'Provinces id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /publicPollutions:
    get:
      tags:
        - PublicPollutions
      summary: 'Find list PublicPollutions'
      description: 'Returns list of PublicPollutions'
      operationId: getPublicPollutions
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/PublicPollutions' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/PublicPollutions' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/PublicPollutions' } }
                type: object
        '404':
          description: 'PublicPollutions not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - PublicPollutions
      summary: 'Add a new PublicPollutions to the store'
      operationId: addPublicPollutions
      requestBody:
        $ref: '#/components/requestBodies/PublicPollutions'
      responses:
        '201':
          description: 'Created PublicPollutions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicPollutions'
            application/xml:
              schema:
                $ref: '#/components/schemas/PublicPollutions'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/publicPollutions/{id}':
    get:
      tags:
        - PublicPollutions
      summary: 'Find PublicPollutions by ID'
      description: 'Returns a single PublicPollutions'
      operationId: getPublicPollutionsById
      parameters:
        -
          name: id
          in: path
          description: 'ID of PublicPollutions to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicPollutions'
            application/xml:
              schema:
                $ref: '#/components/schemas/PublicPollutions'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'PublicPollutions not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - PublicPollutions
      summary: 'Update an existing PublicPollutions'
      operationId: updatePublicPollutions
      parameters:
        -
          name: id
          in: path
          description: 'PublicPollutions id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/PublicPollutions'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'PublicPollutions not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - PublicPollutions
      summary: 'Deletes a PublicPollutions'
      operationId: deletePublicPollutions
      parameters:
        -
          name: id
          in: path
          description: 'PublicPollutions id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /regionalUnits:
    get:
      tags:
        - RegionalUnits
      summary: 'Find list RegionalUnits'
      description: 'Returns list of RegionalUnits'
      operationId: getRegionalUnits
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/RegionalUnits' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/RegionalUnits' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/RegionalUnits' } }
                type: object
        '404':
          description: 'RegionalUnits not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - RegionalUnits
      summary: 'Add a new RegionalUnits to the store'
      operationId: addRegionalUnits
      requestBody:
        $ref: '#/components/requestBodies/RegionalUnits'
      responses:
        '201':
          description: 'Created RegionalUnits'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionalUnits'
            application/xml:
              schema:
                $ref: '#/components/schemas/RegionalUnits'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/regionalUnits/{id}':
    get:
      tags:
        - RegionalUnits
      summary: 'Find RegionalUnits by ID'
      description: 'Returns a single RegionalUnits'
      operationId: getRegionalUnitsById
      parameters:
        -
          name: id
          in: path
          description: 'ID of RegionalUnits to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionalUnits'
            application/xml:
              schema:
                $ref: '#/components/schemas/RegionalUnits'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'RegionalUnits not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - RegionalUnits
      summary: 'Update an existing RegionalUnits'
      operationId: updateRegionalUnits
      parameters:
        -
          name: id
          in: path
          description: 'RegionalUnits id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/RegionalUnits'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'RegionalUnits not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - RegionalUnits
      summary: 'Deletes a RegionalUnits'
      operationId: deleteRegionalUnits
      parameters:
        -
          name: id
          in: path
          description: 'RegionalUnits id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /riverConditions:
    get:
      tags:
        - RiverConditions
      summary: 'Find list RiverConditions'
      description: 'Returns list of RiverConditions'
      operationId: getRiverConditions
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/RiverConditions' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/RiverConditions' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/RiverConditions' } }
                type: object
        '404':
          description: 'RiverConditions not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - RiverConditions
      summary: 'Add a new RiverConditions to the store'
      operationId: addRiverConditions
      requestBody:
        $ref: '#/components/requestBodies/RiverConditions'
      responses:
        '201':
          description: 'Created RiverConditions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiverConditions'
            application/xml:
              schema:
                $ref: '#/components/schemas/RiverConditions'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/riverConditions/{id}':
    get:
      tags:
        - RiverConditions
      summary: 'Find RiverConditions by ID'
      description: 'Returns a single RiverConditions'
      operationId: getRiverConditionsById
      parameters:
        -
          name: id
          in: path
          description: 'ID of RiverConditions to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiverConditions'
            application/xml:
              schema:
                $ref: '#/components/schemas/RiverConditions'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'RiverConditions not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - RiverConditions
      summary: 'Update an existing RiverConditions'
      operationId: updateRiverConditions
      parameters:
        -
          name: id
          in: path
          description: 'RiverConditions id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/RiverConditions'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'RiverConditions not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - RiverConditions
      summary: 'Deletes a RiverConditions'
      operationId: deleteRiverConditions
      parameters:
        -
          name: id
          in: path
          description: 'RiverConditions id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /rivers:
    get:
      tags:
        - Rivers
      summary: 'Find list Rivers'
      description: 'Returns list of Rivers'
      operationId: getRivers
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Rivers' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Rivers' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Rivers' } }
                type: object
        '404':
          description: 'Rivers not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Rivers
      summary: 'Add a new Rivers to the store'
      operationId: addRivers
      requestBody:
        $ref: '#/components/requestBodies/Rivers'
      responses:
        '201':
          description: 'Created Rivers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rivers'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rivers'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/rivers/{id}':
    get:
      tags:
        - Rivers
      summary: 'Find Rivers by ID'
      description: 'Returns a single Rivers'
      operationId: getRiversById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Rivers to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rivers'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rivers'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Rivers not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Rivers
      summary: 'Update an existing Rivers'
      operationId: updateRivers
      parameters:
        -
          name: id
          in: path
          description: 'Rivers id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Rivers'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Rivers not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Rivers
      summary: 'Deletes a Rivers'
      operationId: deleteRivers
      parameters:
        -
          name: id
          in: path
          description: 'Rivers id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /supportDevices:
    get:
      tags:
        - SupportDevices
      summary: 'Find list SupportDevices'
      description: 'Returns list of SupportDevices'
      operationId: getSupportDevices
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/SupportDevices' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/SupportDevices' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/SupportDevices' } }
                type: object
        '404':
          description: 'SupportDevices not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - SupportDevices
      summary: 'Add a new SupportDevices to the store'
      operationId: addSupportDevices
      requestBody:
        $ref: '#/components/requestBodies/SupportDevices'
      responses:
        '201':
          description: 'Created SupportDevices'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportDevices'
            application/xml:
              schema:
                $ref: '#/components/schemas/SupportDevices'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/supportDevices/{id}':
    get:
      tags:
        - SupportDevices
      summary: 'Find SupportDevices by ID'
      description: 'Returns a single SupportDevices'
      operationId: getSupportDevicesById
      parameters:
        -
          name: id
          in: path
          description: 'ID of SupportDevices to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportDevices'
            application/xml:
              schema:
                $ref: '#/components/schemas/SupportDevices'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'SupportDevices not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - SupportDevices
      summary: 'Update an existing SupportDevices'
      operationId: updateSupportDevices
      parameters:
        -
          name: id
          in: path
          description: 'SupportDevices id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/SupportDevices'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'SupportDevices not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - SupportDevices
      summary: 'Deletes a SupportDevices'
      operationId: deleteSupportDevices
      parameters:
        -
          name: id
          in: path
          description: 'SupportDevices id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /users:
    get:
      tags:
        - Users
      summary: 'Find list Users'
      description: 'Returns list of Users'
      operationId: getUsers
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Users' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Users' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Users' } }
                type: object
        '404':
          description: 'Users not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Users
      summary: 'Add a new Users to the store'
      operationId: addUsers
      requestBody:
        $ref: '#/components/requestBodies/Users'
      responses:
        '201':
          description: 'Created Users'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
            application/xml:
              schema:
                $ref: '#/components/schemas/Users'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/users/{id}':
    get:
      tags:
        - Users
      summary: 'Find Users by ID'
      description: 'Returns a single Users'
      operationId: getUsersById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Users to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
            application/xml:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Users not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Users
      summary: 'Update an existing Users'
      operationId: updateUsers
      parameters:
        -
          name: id
          in: path
          description: 'Users id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Users'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Users not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Users
      summary: 'Deletes a Users'
      operationId: deleteUsers
      parameters:
        -
          name: id
          in: path
          description: 'Users id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
components:
  schemas:
    Administrators:
      title: Administrators
      description: Administrators
      properties:
        administrator_id:
          nullable: false
          title: administrator_id
          description: administrator_id
          type: string
          format: '-'
          maxLength: 6
        user_id:
          nullable: false
          title: user_id
          description: user_id
          type: string
          format: '-'
          maxLength: 6
        administrator_name:
          nullable: false
          title: administrator_name
          description: administrator_name
          type: string
          format: '-'
          maxLength: 100
        administrator_phone:
          nullable: false
          title: administrator_phone
          description: administrator_phone
          type: string
          format: '-'
          maxLength: 20
        administrator_img:
          nullable: false
          title: administrator_img
          description: administrator_img
          type: string
          format: '-'
          maxLength: 255
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: '-'
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: '-'
      type: object
    Cities:
      title: Cities
      description: Cities
      properties:
        city_id:
          nullable: false
          title: city_id
          description: city_id
          type: integer
          format: '-'
        city_name:
          nullable: true
          title: city_name
          description: city_name
          type: string
          format: '-'
          maxLength: 255
        prov_id:
          nullable: true
          title: prov_id
          description: prov_id
          type: integer
          format: '-'
      type: object
    CreekConditions:
      title: CreekConditions
      description: CreekConditions
      properties:
        creek_condition_id:
          nullable: false
          title: creek_condition_id
          description: creek_condition_id
          type: string
          format: '-'
          maxLength: 6
        observer_id:
          nullable: false
          title: observer_id
          description: observer_id
          type: string
          format: '-'
          maxLength: 6
        creek_id:
          nullable: false
          title: creek_id
          description: creek_id
          type: string
          format: '-'
          maxLength: 6
        creek_condition_description:
          nullable: false
          title: creek_condition_description
          description: creek_condition_description
          type: string
          format: '-'
        creek_condition_longitude:
          nullable: false
          title: creek_condition_longitude
          description: creek_condition_longitude
          type: string
          format: '-'
          maxLength: 100
        creek_condition_lattitude:
          nullable: false
          title: creek_condition_lattitude
          description: creek_condition_lattitude
          type: string
          format: '-'
          maxLength: 100
        creek_condition_status:
          nullable: false
          title: creek_condition_status
          description: creek_condition_status
          type: string
          format: '-'
        creek_condition_handling_status:
          nullable: false
          title: creek_condition_handling_status
          description: creek_condition_handling_status
          type: string
          format: '-'
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: '-'
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: '-'
      type: object
    Creeks:
      title: Creeks
      description: Creeks
      properties:
        creek_id:
          nullable: false
          title: creek_id
          description: creek_id
          type: string
          format: '-'
          maxLength: 6
        river_id:
          nullable: false
          title: river_id
          description: river_id
          type: string
          format: '-'
          maxLength: 6
        creek_name:
          nullable: false
          title: creek_name
          description: creek_name
          type: string
          format: '-'
          maxLength: 50
        creek_geojson:
          nullable: false
          title: creek_geojson
          description: creek_geojson
          type: string
          format: '-'
          maxLength: 100
        creek_longitude:
          nullable: false
          title: creek_longitude
          description: creek_longitude
          type: string
          format: '-'
          maxLength: 100
        creek_lattitude:
          nullable: false
          title: creek_lattitude
          description: creek_lattitude
          type: string
          format: '-'
          maxLength: 100
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: '-'
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: '-'
      type: object
    DikeConditions:
      title: DikeConditions
      description: DikeConditions
      properties:
        dike_condition_id:
          nullable: false
          title: dike_condition_id
          description: dike_condition_id
          type: string
          format: '-'
          maxLength: 6
        observer_id:
          nullable: false
          title: observer_id
          description: observer_id
          type: string
          format: '-'
          maxLength: 6
        dike_id:
          nullable: false
          title: dike_id
          description: dike_id
          type: string
          format: '-'
          maxLength: 6
        dike_condition_description:
          nullable: false
          title: dike_condition_description
          description: dike_condition_description
          type: string
          format: '-'
        dike_condition_longitude:
          nullable: false
          title: dike_condition_longitude
          description: dike_condition_longitude
          type: string
          format: '-'
          maxLength: 100
        dike_condition_lattitude:
          nullable: false
          title: dike_condition_lattitude
          description: dike_condition_lattitude
          type: string
          format: '-'
          maxLength: 100
        dike_condition_status:
          nullable: false
          title: dike_condition_status
          description: dike_condition_status
          type: string
          format: '-'
        drain_condition_handling_status:
          nullable: false
          title: drain_condition_handling_status
          description: drain_condition_handling_status
          type: string
          format: '-'
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: '-'
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: '-'
      type: object
    Dikes:
      title: Dikes
      description: Dikes
      properties:
        dike_id:
          nullable: false
          title: dike_id
          description: dike_id
          type: string
          format: '-'
          maxLength: 6
        river_id:
          nullable: false
          title: river_id
          description: river_id
          type: string
          format: '-'
          maxLength: 6
        regional_unit_id:
          nullable: false
          title: regional_unit_id
          description: regional_unit_id
          type: string
          format: '-'
          maxLength: 6
        dike_name:
          nullable: false
          title: dike_name
          description: dike_name
          type: string
          format: '-'
          maxLength: 50
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: '-'
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: '-'
      type: object
    DrainConditions:
      title: DrainConditions
      description: DrainConditions
      properties:
        drain_condition_id:
          nullable: false
          title: drain_condition_id
          description: drain_condition_id
          type: string
          format: '-'
          maxLength: 6
        observer_id:
          nullable: false
          title: observer_id
          description: observer_id
          type: string
          format: '-'
          maxLength: 6
        drain_id:
          nullable: false
          title: drain_id
          description: drain_id
          type: string
          format: '-'
          maxLength: 6
        drain_condition_description:
          nullable: false
          title: drain_condition_description
          description: drain_condition_description
          type: string
          format: '-'
        drain_condition_longitude:
          nullable: false
          title: drain_condition_longitude
          description: drain_condition_longitude
          type: string
          format: '-'
          maxLength: 100
        drain_condition_lattitude:
          nullable: false
          title: drain_condition_lattitude
          description: drain_condition_lattitude
          type: string
          format: '-'
          maxLength: 100
        drain_condition_status:
          nullable: false
          title: drain_condition_status
          description: drain_condition_status
          type: string
          format: '-'
        drain_condition_handling_status:
          nullable: false
          title: drain_condition_handling_status
          description: drain_condition_handling_status
          type: string
          format: '-'
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: '-'
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: '-'
      type: object
    Drains:
      title: Drains
      description: Drains
      properties:
        drain_id:
          nullable: false
          title: drain_id
          description: drain_id
          type: string
          format: '-'
          maxLength: 6
        drain_name:
          nullable: false
          title: drain_name
          description: drain_name
          type: string
          format: '-'
          maxLength: 50
        drain_geojson:
          nullable: false
          title: drain_geojson
          description: drain_geojson
          type: string
          format: '-'
          maxLength: 100
        drain_longitude:
          nullable: false
          title: drain_longitude
          description: drain_longitude
          type: string
          format: '-'
          maxLength: 100
        drain_lattitude:
          nullable: false
          title: drain_lattitude
          description: drain_lattitude
          type: string
          format: '-'
          maxLength: 100
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: '-'
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: '-'
      type: object
    IndustryPollutions:
      title: IndustryPollutions
      description: IndustryPollutions
      properties:
        industry_pollution_id:
          nullable: false
          title: industry_pollution_id
          description: industry_pollution_id
          type: string
          format: '-'
          maxLength: 6
        observer_id:
          nullable: false
          title: observer_id
          description: observer_id
          type: string
          format: '-'
          maxLength: 6
        industry_pollution_title:
          nullable: false
          title: industry_pollution_title
          description: industry_pollution_title
          type: string
          format: '-'
          maxLength: 70
        industry_pollution_description:
          nullable: false
          title: industry_pollution_description
          description: industry_pollution_description
          type: string
          format: '-'
        industry_pollution_longitude:
          nullable: false
          title: industry_pollution_longitude
          description: industry_pollution_longitude
          type: string
          format: '-'
          maxLength: 100
        industry_pollution_lattitude:
          nullable: false
          title: industry_pollution_lattitude
          description: industry_pollution_lattitude
          type: string
          format: '-'
          maxLength: 100
        industry_pollution_type:
          nullable: false
          title: industry_pollution_type
          description: industry_pollution_type
          type: string
          format: '-'
        industry_pollution_img:
          nullable: false
          title: industry_pollution_img
          description: industry_pollution_img
          type: string
          format: '-'
          maxLength: 255
        industry_pollution_status:
          nullable: false
          title: industry_pollution_status
          description: industry_pollution_status
          type: string
          format: '-'
        industry_pollution_action:
          nullable: false
          title: industry_pollution_action
          description: industry_pollution_action
          type: string
          format: '-'
        industry_pollution_action_img:
          nullable: false
          title: industry_pollution_action_img
          description: industry_pollution_action_img
          type: string
          format: '-'
          maxLength: 255
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: '-'
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: '-'
      type: object
    Observers:
      title: Observers
      description: Observers
      properties:
        observer_id:
          nullable: false
          title: observer_id
          description: observer_id
          type: string
          format: '-'
          maxLength: 6
        user_id:
          nullable: false
          title: user_id
          description: user_id
          type: string
          format: '-'
          maxLength: 6
        regional_unit_id:
          nullable: false
          title: regional_unit_id
          description: regional_unit_id
          type: string
          format: '-'
          maxLength: 6
        observer_name:
          nullable: false
          title: observer_name
          description: observer_name
          type: string
          format: '-'
          maxLength: 50
        observer_phone:
          nullable: false
          title: observer_phone
          description: observer_phone
          type: string
          format: '-'
          maxLength: 20
        observer_img:
          nullable: false
          title: observer_img
          description: observer_img
          type: string
          format: '-'
          maxLength: 255
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: '-'
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: '-'
      type: object
    Provinces:
      title: Provinces
      description: Provinces
      properties:
        prov_id:
          nullable: false
          title: prov_id
          description: prov_id
          type: integer
          format: '-'
        prov_name:
          nullable: true
          title: prov_name
          description: prov_name
          type: string
          format: '-'
          maxLength: 255
        locationid:
          nullable: true
          title: locationid
          description: locationid
          type: integer
          format: '-'
        status:
          nullable: true
          title: status
          description: status
          type: integer
          format: '-'
      type: object
    PublicPollutions:
      title: PublicPollutions
      description: PublicPollutions
      properties:
        public_pollution_id:
          nullable: false
          title: public_pollution_id
          description: public_pollution_id
          type: string
          format: '-'
          maxLength: 6
        observer_id:
          nullable: false
          title: observer_id
          description: observer_id
          type: string
          format: '-'
          maxLength: 6
        public_pollution_title:
          nullable: false
          title: public_pollution_title
          description: public_pollution_title
          type: string
          format: '-'
          maxLength: 70
        public_pollution_description:
          nullable: false
          title: public_pollution_description
          description: public_pollution_description
          type: string
          format: '-'
        public_pollution_longitude:
          nullable: false
          title: public_pollution_longitude
          description: public_pollution_longitude
          type: string
          format: '-'
          maxLength: 100
        public_pollution_lattitude:
          nullable: false
          title: public_pollution_lattitude
          description: public_pollution_lattitude
          type: string
          format: '-'
          maxLength: 100
        public_pollution_type:
          nullable: false
          title: public_pollution_type
          description: public_pollution_type
          type: string
          format: '-'
        public_pollution_img:
          nullable: false
          title: public_pollution_img
          description: public_pollution_img
          type: string
          format: '-'
          maxLength: 255
        public_pollution_status:
          nullable: false
          title: public_pollution_status
          description: public_pollution_status
          type: string
          format: '-'
        public_pollution_action:
          nullable: false
          title: public_pollution_action
          description: public_pollution_action
          type: string
          format: '-'
        public_pollution_action_img:
          nullable: false
          title: public_pollution_action_img
          description: public_pollution_action_img
          type: string
          format: '-'
          maxLength: 255
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: '-'
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: '-'
      type: object
    RegionalUnits:
      title: RegionalUnits
      description: RegionalUnits
      properties:
        regional_unit_id:
          nullable: false
          title: regional_unit_id
          description: regional_unit_id
          type: string
          format: '-'
          maxLength: 6
        main_administrator_id:
          nullable: false
          title: main_administrator_id
          description: main_administrator_id
          type: string
          format: '-'
          maxLength: 6
        city_id:
          nullable: false
          title: city_id
          description: city_id
          type: integer
          format: '-'
        regional_unit_name:
          nullable: false
          title: regional_unit_name
          description: regional_unit_name
          type: string
          format: '-'
          maxLength: 50
        regional_unit_address:
          nullable: false
          title: regional_unit_address
          description: regional_unit_address
          type: string
          format: '-'
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: '-'
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: '-'
      type: object
    RiverConditions:
      title: RiverConditions
      description: RiverConditions
      properties:
        river_condition_id:
          nullable: false
          title: river_condition_id
          description: river_condition_id
          type: string
          format: '-'
          maxLength: 6
        observer_id:
          nullable: false
          title: observer_id
          description: observer_id
          type: string
          format: '-'
          maxLength: 6
        river_id:
          nullable: false
          title: river_id
          description: river_id
          type: string
          format: '-'
          maxLength: 6
        river_condition_description:
          nullable: false
          title: river_condition_description
          description: river_condition_description
          type: string
          format: '-'
        river_condition_longitude:
          nullable: false
          title: river_condition_longitude
          description: river_condition_longitude
          type: string
          format: '-'
          maxLength: 100
        river_condition_lattitude:
          nullable: false
          title: river_condition_lattitude
          description: river_condition_lattitude
          type: string
          format: '-'
          maxLength: 100
        river_condition_status:
          nullable: false
          title: river_condition_status
          description: river_condition_status
          type: string
          format: '-'
        river_condition_handling_status:
          nullable: false
          title: river_condition_handling_status
          description: river_condition_handling_status
          type: string
          format: '-'
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: '-'
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: '-'
      type: object
    Rivers:
      title: Rivers
      description: Rivers
      properties:
        river_id:
          nullable: false
          title: river_id
          description: river_id
          type: string
          format: '-'
          maxLength: 6
        river_name:
          nullable: false
          title: river_name
          description: river_name
          type: string
          format: '-'
          maxLength: 50
        river_geojson:
          nullable: false
          title: river_geojson
          description: river_geojson
          type: string
          format: '-'
          maxLength: 100
        river_longitude:
          nullable: false
          title: river_longitude
          description: river_longitude
          type: string
          format: '-'
          maxLength: 100
        river_lattitude:
          nullable: false
          title: river_lattitude
          description: river_lattitude
          type: string
          format: '-'
          maxLength: 100
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: '-'
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: '-'
      type: object
    SupportDevices:
      title: SupportDevices
      description: SupportDevices
      properties:
        support_device_id:
          nullable: false
          title: support_device_id
          description: support_device_id
          type: string
          format: '-'
          maxLength: 6
        regional_unit_id:
          nullable: false
          title: regional_unit_id
          description: regional_unit_id
          type: string
          format: '-'
          maxLength: 6
        support_device_name:
          nullable: false
          title: support_device_name
          description: support_device_name
          type: string
          format: '-'
          maxLength: 50
        support_device_description:
          nullable: false
          title: support_device_description
          description: support_device_description
          type: string
          format: '-'
        support_device_longitude:
          nullable: false
          title: support_device_longitude
          description: support_device_longitude
          type: string
          format: '-'
          maxLength: 100
        support_device_lattitude:
          nullable: false
          title: support_device_lattitude
          description: support_device_lattitude
          type: string
          format: '-'
          maxLength: 100
        support_device_type:
          nullable: false
          title: support_device_type
          description: support_device_type
          type: string
          format: '-'
        support_device_link:
          nullable: false
          title: support_device_link
          description: support_device_link
          type: string
          format: '-'
        support_device_status:
          nullable: false
          title: support_device_status
          description: support_device_status
          type: string
          format: '-'
        support_device_username:
          nullable: false
          title: support_device_username
          description: support_device_username
          type: string
          format: '-'
          maxLength: 255
        support_device_password:
          nullable: false
          title: support_device_password
          description: support_device_password
          type: string
          format: '-'
          maxLength: 150
        support_device_port:
          nullable: false
          title: support_device_port
          description: support_device_port
          type: string
          format: '-'
          maxLength: 20
        last_updated_condition_by:
          nullable: false
          title: last_updated_condition_by
          description: last_updated_condition_by
          type: string
          format: '-'
          maxLength: 6
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: '-'
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: '-'
      type: object
    Users:
      title: Users
      description: Users
      properties:
        user_id:
          nullable: false
          title: user_id
          description: user_id
          type: string
          format: '-'
          maxLength: 6
        user_email:
          nullable: false
          title: user_email
          description: user_email
          type: string
          format: '-'
          maxLength: 100
        user_hint:
          nullable: false
          title: user_hint
          description: user_hint
          type: string
          format: '-'
          maxLength: 20
        user_status:
          nullable: false
          title: user_status
          description: user_status
          type: string
          format: '-'
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: '-'
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: '-'
      type: object
  requestBodies:
    Administrators:
      description: 'Administrators object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Administrators'
        application/xml:
          schema:
            $ref: '#/components/schemas/Administrators'
        application/json:
          schema:
            $ref: '#/components/schemas/Administrators'
    Cities:
      description: 'Cities object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Cities'
        application/xml:
          schema:
            $ref: '#/components/schemas/Cities'
        application/json:
          schema:
            $ref: '#/components/schemas/Cities'
    CreekConditions:
      description: 'CreekConditions object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/CreekConditions'
        application/xml:
          schema:
            $ref: '#/components/schemas/CreekConditions'
        application/json:
          schema:
            $ref: '#/components/schemas/CreekConditions'
    Creeks:
      description: 'Creeks object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Creeks'
        application/xml:
          schema:
            $ref: '#/components/schemas/Creeks'
        application/json:
          schema:
            $ref: '#/components/schemas/Creeks'
    DikeConditions:
      description: 'DikeConditions object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/DikeConditions'
        application/xml:
          schema:
            $ref: '#/components/schemas/DikeConditions'
        application/json:
          schema:
            $ref: '#/components/schemas/DikeConditions'
    Dikes:
      description: 'Dikes object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Dikes'
        application/xml:
          schema:
            $ref: '#/components/schemas/Dikes'
        application/json:
          schema:
            $ref: '#/components/schemas/Dikes'
    DrainConditions:
      description: 'DrainConditions object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/DrainConditions'
        application/xml:
          schema:
            $ref: '#/components/schemas/DrainConditions'
        application/json:
          schema:
            $ref: '#/components/schemas/DrainConditions'
    Drains:
      description: 'Drains object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Drains'
        application/xml:
          schema:
            $ref: '#/components/schemas/Drains'
        application/json:
          schema:
            $ref: '#/components/schemas/Drains'
    IndustryPollutions:
      description: 'IndustryPollutions object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/IndustryPollutions'
        application/xml:
          schema:
            $ref: '#/components/schemas/IndustryPollutions'
        application/json:
          schema:
            $ref: '#/components/schemas/IndustryPollutions'
    Observers:
      description: 'Observers object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Observers'
        application/xml:
          schema:
            $ref: '#/components/schemas/Observers'
        application/json:
          schema:
            $ref: '#/components/schemas/Observers'
    Provinces:
      description: 'Provinces object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Provinces'
        application/xml:
          schema:
            $ref: '#/components/schemas/Provinces'
        application/json:
          schema:
            $ref: '#/components/schemas/Provinces'
    PublicPollutions:
      description: 'PublicPollutions object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/PublicPollutions'
        application/xml:
          schema:
            $ref: '#/components/schemas/PublicPollutions'
        application/json:
          schema:
            $ref: '#/components/schemas/PublicPollutions'
    RegionalUnits:
      description: 'RegionalUnits object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/RegionalUnits'
        application/xml:
          schema:
            $ref: '#/components/schemas/RegionalUnits'
        application/json:
          schema:
            $ref: '#/components/schemas/RegionalUnits'
    RiverConditions:
      description: 'RiverConditions object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/RiverConditions'
        application/xml:
          schema:
            $ref: '#/components/schemas/RiverConditions'
        application/json:
          schema:
            $ref: '#/components/schemas/RiverConditions'
    Rivers:
      description: 'Rivers object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Rivers'
        application/xml:
          schema:
            $ref: '#/components/schemas/Rivers'
        application/json:
          schema:
            $ref: '#/components/schemas/Rivers'
    SupportDevices:
      description: 'SupportDevices object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/SupportDevices'
        application/xml:
          schema:
            $ref: '#/components/schemas/SupportDevices'
        application/json:
          schema:
            $ref: '#/components/schemas/SupportDevices'
    Users:
      description: 'Users object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Users'
        application/xml:
          schema:
            $ref: '#/components/schemas/Users'
        application/json:
          schema:
            $ref: '#/components/schemas/Users'
tags:
  -
    name: Administrators
    description: 'Everything about your Administrators'
  -
    name: Cities
    description: 'Everything about your Cities'
  -
    name: CreekConditions
    description: 'Everything about your CreekConditions'
  -
    name: Creeks
    description: 'Everything about your Creeks'
  -
    name: DikeConditions
    description: 'Everything about your DikeConditions'
  -
    name: Dikes
    description: 'Everything about your Dikes'
  -
    name: DrainConditions
    description: 'Everything about your DrainConditions'
  -
    name: Drains
    description: 'Everything about your Drains'
  -
    name: IndustryPollutions
    description: 'Everything about your IndustryPollutions'
  -
    name: Observers
    description: 'Everything about your Observers'
  -
    name: Provinces
    description: 'Everything about your Provinces'
  -
    name: PublicPollutions
    description: 'Everything about your PublicPollutions'
  -
    name: RegionalUnits
    description: 'Everything about your RegionalUnits'
  -
    name: RiverConditions
    description: 'Everything about your RiverConditions'
  -
    name: Rivers
    description: 'Everything about your Rivers'
  -
    name: SupportDevices
    description: 'Everything about your SupportDevices'
  -
    name: Users
    description: 'Everything about your Users'
